# install.ps1 : This powershell script installs the puppet-agent package from a Puppet Enterprise master
Param(
  [string]$server      = "<%= @server_setting %>",
  [string]$certname    = $null,
  [string]$msi_dest    = "$env:temp\puppet-agent-x64.msi",
  [string]$msi_source  = "https://<%= @msi_host %>:8140/packages/current/windows-x86_64/puppet-agent-x64.msi",
  [string]$install_log = "$env:temp\puppet-install.log",
  [bool]$verbose       = $false
)

function DownloadPuppet {
  if ($verbose -ne $false) {
    Write-Verbose "Downloading the Puppet Agent for Puppet Enterprise <%= @pe_build %> on $env:COMPUTERNAME..." -verbose
  }
  [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true}
  $webclient = New-Object system.net.webclient
  try {
    $webclient.DownloadFile($msi_source,$msi_dest)
  }
  catch [Net.WebException] {
    Write-Warning "Failed to download the Puppet Agent installer: $msi_source"
    Write-Warning "$_"
    Write-Warning "Does the Puppet Master have the pe_repo::platform::windows_<arch> class applied to it?"
    break
  }
}

function SetTimeServices {
  net stop w32time
  w32tm /config /syncfromflags:manual /manualpeerlist:"0.pool.ntp.org,1.pool.ntp.org,2.pool.ntp.org" # no whitespace
  w32tm /config /reliable:yes
  net start w32time
  w32tm /resync /force  
}

function SetDnsServices {
#  try
#  {
    $serverAddresses = (Get-DnsClientServerAddress 'Ethernet0').ServerAddresses
    if (-Not ($serverAddresses.Count) -Or <%= "1" %>) {
      $serverAddresses = '8.8.8.8','8.8.4.4'
      if ($verbose -ne $false) {
        Write-Verbose "Updating Server Addresses for <%= 'Ethernet0' %> InterfaceAlias: $serverAddresses"
      }
    }
    else {
      if ($verbose -ne $false) {
        Write-Verbose "Keeping existing Server Addresses for <%= 'Ethernet0' %> InterfaceAlias: $serverAddresses"
      }
    }
    $serverAddresses = Out-String -InputObject $serverAddresses -Stream
    Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddresses $serverAddresses
#  }
#  catch {
    #TODO catch invalid InterfaceAlias
    #TODO catch invalid ServerAddresses
#  }
}

function GetCertname {
  if (![string]::IsNullOrEmpty($certname)) {
    $certname.ToLower()
  } else {
    $objIPProperties = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties()
    $name_components = @($objIPProperties.HostName, $objIPProperties.DomainName) | ? {$_}
    $certname        = $name_components -Join "."
    $certname.ToLower()
  }
}

function InstallPuppet {
  $real_certname = GetCertname
  if ([string]::IsNullOrEmpty($real_certname)) {
    Throw 'Unable to determine a certname to use. Halting installation...'
    break
  }
  if ($verbose -ne $false) {
    Write-Verbose "Using certname => $real_certname" -verbose
    Write-Verbose "Using server   => $server" -verbose
    Write-Verbose "Saving the install log to $install_log" -verbose
    Write-Verbose "Installing the Puppet Agent on $env:COMPUTERNAME..." -verbose
  }
  $msiexec_path = "C:\Windows\System32\msiexec.exe"
  $msiexec_args = "/qn /log $install_log /i $msi_dest PUPPET_MASTER_SERVER=$server PUPPET_AGENT_CERTNAME=$real_certname"
  $msiexec_proc = [System.Diagnostics.Process]::Start($msiexec_path, $msiexec_args)
  $msiexec_proc.WaitForExit()
}

function ValidateInstall {
  If ((Get-WmiObject -Class Win32_Product).Name -match 'Puppet') {
    If ($verbose -ne $false) {
      Write-Verbose "The Puppet Agent has been installed on $env:COMPUTERNAME" -verbose
    }
  } else {
      Throw {"Something went wrong with the installation on $env:COMPUTERNAME.  Check the install log at: $install_log" }
      break
  }
}

DownloadPuppet
SetTimeServices
SetDnsServices
InstallPuppet
ValidateInstall

if ($verbose -ne $false) {
  Write-Verbose "Installation has completed." -verbose
}
