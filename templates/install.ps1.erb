# install.ps1 : This powershell script installs the puppet-agent package from a Puppet Enterprise master
[CmdletBinding()]

Param(
  [string]$server          = "<%= @server_setting %>",
  [string]$certname        = $null,
  [string]$msi_dest        = "$env:temp\puppet-agent-x64.msi",
  [string]$msi_source      = "https://<%= @msi_host %>:8140/packages/current/windows-x86_64/puppet-agent-x64.msi",
  [string]$install_log     = "$env:temp\puppet-install.log"
)
# Uncomment the following line to enable debugging messages. Alternatively, this variable can be set in the shell.
#$DebugPreference = 'Continue'

<% if @set_ntp_servers -%>
function ValidateParameters {
  if (Get-Command Test-NetConnection -errorAction SilentlyContinue) {
    Write-Verbose 'Validating server connections.'
    $checkPort  = 8140
    $msiHost    = ([System.Uri]$msi_source).Host 
    $checkHosts = ($server, $msiHost)
    foreach ($checkHost in $checkHosts) {
      Write-Verbose "Checking connection to ${checkHost}:${checkPort}."
      $checkJob = Start-Job -ScriptBlock {
        param($checkHost, $checkPort)
        Test-NetConnection -ComputerName "${checkHost}" -Port $checkPort -InformationLevel Quiet
      } -ArgumentList ($CheckHost, $CheckPort)
      Out-String -InputObject $checkJob -Stream | Write-Debug
      $rc = Wait-Job $checkJob
      Out-String -InputObject $rc -Stream | Write-Debug
      $rc = Receive-Job $checkJob -OutVariable testResult
      Out-String -InputObject $rc -Stream | Write-Debug
      if ($testResult) {
        Write-Verbose "Successful connection to ${checkHost}:${checkPort}."
      }
      else {        
        Throw "Failed to connect to ${checkHost}:${checkPort}"
        break
      }
    }
  }
  else {
    Write-Debug 'Test-NetConnection cmdlet is not available. Skipping connection tests.'
  }
}

<% end -%>
function DownloadPuppet {
  Write-Verbose "Downloading the Puppet Agent for Puppet Enterprise <%= @pe_build %> on $env:COMPUTERNAME..."
  [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true}
  $webclient = New-Object system.net.webclient
  try {
    $webclient.DownloadFile($msi_source,$msi_dest)
  }
  catch [Net.WebException] {
    Write-Warning "Failed to download the Puppet Agent installer: ${msi_source}"
    Write-Warning "$_"
    Write-Warning 'Does the Puppet Master have the pe_repo::platform::windows_<arch> class applied to it?'
    break
  }
}

function ResyncTime {
  $result = $TRUE
  W32tm /resync /force | foreach {
    Write-Debug "$_"
    if ($_ -like '*The computer did not resync because the required time change was too big*') {
      $result = $FALSE
    }
    else {
      if ($_ -like '*computer did not resync*') {
        Write-Warning $_
      }
    }
  }
  return $result
}

function SetTimeServices {
  Write-Verbose 'Managing time services (W32time).'
  $timeServicesStatus = (Get-Service -Name W32time).Status
  if ($timeServicesStatus -ne 'stopped') {
    Write-Debug 'Stopping W32time service.'
    $rc = net stop W32time
    Out-String -InputObject $rc -Stream | Write-Debug
  }
  Write-Verbose "Configuring W32time to use '<%= @ntp %>' for time servers."
  $rc = W32tm /config /syncfromflags:manual /manualpeerlist:'<%= @ntp %>'
  Out-String -InputObject $rc -Stream | Write-Debug
  $rc = W32tm /config /reliable:yes
  Out-String -InputObject $rc -Stream | Write-Debug
  Write-Debug 'Starting W32time service.'
  $rc = net start W32time
  Out-String -InputObject $rc -Stream | Write-Debug
  Write-Debug 'Current Configuration:'
  W32tm /query /configuration | foreach {
    Write-Debug "$_"
  }
  Write-Verbose 'Force time sync.'
  $rc = ResyncTime
  if (-Not $rc) {
    $pauseSecs = 10
    Write-Verbose 'Retrying time resync.'
    Write-Debug   "Waiting ${pauseSecs} seconds before retrying time sync."
    Start-Sleep -s $pauseSecs
    $rc = ResyncTime
    if (-Not $rc) {
      Write-Error   'Could not sync time.'
      Write-Warning 'Manual intervention may be neccessary. Please check provided NTP Servers.'
      break
    }
  }
}

function GetCertname {
  if (![string]::IsNullOrEmpty($certname)) {
    $certname.ToLower()
  } else {
    $objIPProperties = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties()
    $name_components = @($objIPProperties.HostName, $objIPProperties.DomainName) | ? {$_}
    $certname        = $name_components -Join "."
    $certname.ToLower()
  }
}

function InstallPuppet {
  $real_certname = GetCertname
  if ([string]::IsNullOrEmpty($real_certname)) {
    Throw 'Unable to determine a certname to use. Halting installation...'
    break
  }
  Write-Verbose "Using certname => ${real_certname}"
  Write-Verbose "Using server   => ${server}"
  Write-Verbose "Saving the install log to ${install_log}."
  Write-Verbose "Installing the Puppet Agent on $env:COMPUTERNAME..."
  $msiexec_path = "C:\Windows\System32\msiexec.exe"
  $msiexec_args = "/qn /log ${install_log} /i ${msi_dest} PUPPET_MASTER_SERVER=${server} PUPPET_AGENT_CERTNAME=${real_certname}"
  $msiexec_proc = [System.Diagnostics.Process]::Start($msiexec_path, $msiexec_args)
  $msiexec_proc.WaitForExit()
}

function ValidateInstall {
  Write-Verbose 'Validating Puppet Agent.'
  Write-Debug   'Checking if WmiObject exists for Puppet.'
  If ((Get-WmiObject -Class Win32_Product).Name -Match 'Puppet') {
    Write-Verbose "The Puppet Agent has been installed on $env:COMPUTERNAME."
  }
  else {
    Throw "Something went wrong with the installation on $env:COMPUTERNAME.  Check the install log at: ${install_log}"
    break
  }
  Write-Debug 'Validating Puppet Agent service is running.'
  $puppetStatus = (Get-Service -Name Puppet).Status
  if ($puppetStatus -eq 'running') {
    Write-Verbose "The Puppet Agent is running on $env:COMPUTERNAME"
  }
  else {
    Write-Debug "Puppet Agent Status: ${puppetStatus}"
    Throw "Something went wrong with starting the Puppet Agent on $env:COMPUTERNAME.  Check the install log at: ${install_log}"
    break
  }
}

ValidateParameters
DownloadPuppet
<% if @set_ntp_servers -%>
SetTimeServices
<% end -%>
InstallPuppet
ValidateInstall
Write-Verbose "Installation has completed."
